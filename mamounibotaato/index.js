require('dotenv').config(); // Load .env variables

const { Client } = require('discord.js-selfbot-v13');
const client = new Client({ checkUpdate: false });

const OWNER_ID = process.env.OWNER_ID;
const AUTO_REACT_IDS = (process.env.AUTO_REACT_IDS || '').split(',').filter(id => id);
const gifStatus = "https://tenor.com/view/hacker-gif-19246062";

// Store user-emoji pairs
const userEmojis = new Map();
const defaultEmoji = "<:Logo_team_spirit:1201067260089991178>";

const autoReplies = {
    "mamouni1xp": "chokran 3la lmov üòç",
};

// Owner mention response
let ownerTagResponse = "hawa sidi baki jay l3endek";
let ownerMentionEnabled = true;

// Bot Ready Event
client.on('ready', () => {
    console.log(`‚úÖ Logged in as ${client.user.tag}`);

    try {
        client.user.setActivity("By mamouni_1xp", { type: "LISTENING", url: gifStatus });
        console.log(`‚úÖ Status set`);
    } catch (error) {
        console.error("‚ùå Error setting status:", error);
    }
});

// Unified Message Event
client.on('messageCreate', async (message) => {
    if (message.author.id === client.user.id) return;

    // Auto-react for specific users
    if (message.author.id === OWNER_ID || AUTO_REACT_IDS.includes(message.author.id)) {
        try {
            await message.react('ü´¶');
        } catch (err) {
            console.error("‚ùå Error reacting to message:", err);
        }
    }

    // Auto-reply based on keywords
    for (const [trigger, reply] of Object.entries(autoReplies)) {
        if (message.content.toLowerCase().includes(trigger)) {
            try {
                await message.reply(reply);
            } catch (err) {
                console.error("‚ùå Error replying:", err);
            }
        }
    }

    // Auto-react with custom emojis
    if (userEmojis.has(message.author.id)) {
        try {
            await message.react(userEmojis.get(message.author.id));
        } catch (err) {
            console.error("‚ùå Error reacting with custom emoji:", err);
        }
    }

    // Help command
    if (message.content === '!3aweni') {
        const helpText = `
        **üìú ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ŸàÿßŸÖÿ±:**
        
        **üé≠ ÿßŸÑÿ£Ÿàÿ™Ÿà ÿ±ŸäÿßŸÉÿ¥ŸÜ**
        \`!zidd @user [emoji]\` - ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ•ŸÑŸâ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ™ŸÅÿßÿπŸÑ ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä ŸÖÿπ ÿ•ŸäŸÖŸàÿ¨Ÿä ŸÖÿÆÿµÿµ.
        \`!kherej @user\` - ÿ•ÿ≤ÿßŸÑÿ© ŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖŸÜ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ™ŸÅÿßÿπŸÑ ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä.
        \`!lista\` - ÿπÿ±ÿ∂ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ŸÖÿπ ÿßŸÑÿ•ŸäŸÖŸàÿ¨Ÿäÿßÿ™ ÿßŸÑŸÖÿÆÿµÿµÿ©.

        **üí¨ ÿßŸÑÿ±ÿØŸàÿØ ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿäÿ©**
        \`!jaweb [ÿßŸÑŸÜÿµ]\` - ÿ™ÿ∫ŸäŸäÿ± ÿ±ÿØ ÿßŸÑÿ®Ÿàÿ™ ÿπŸÜÿØ ÿ∞ŸÉÿ± ÿµÿßÿ≠ÿ® ÿßŸÑÿ®Ÿàÿ™.
        \`!mon/of\` - ÿ™ÿ¥ÿ∫ŸäŸÑ/ÿ•ŸäŸÇÿßŸÅ ÿ±ÿØ ÿßŸÑÿ®Ÿàÿ™ ÿπŸÜÿØ ÿ∞ŸÉÿ± ÿµÿßÿ≠ÿ® ÿßŸÑÿ®Ÿàÿ™.

        **ü§ñ Ÿàÿ∏ÿßÿ¶ŸÅ ÿ£ÿÆÿ±Ÿâ**
        - ŸäŸÇŸàŸÖ ÿßŸÑÿ®Ÿàÿ™ ÿ®ÿßŸÑÿ™ŸÅÿßÿπŸÑ ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß ŸÖÿπ ÿ±ÿ≥ÿßÿ¶ŸÑ ÿ£ÿ¥ÿÆÿßÿµ ŸÖÿ≠ÿØÿØŸäŸÜ ÿ®ÿ•ŸäŸÖŸàÿ¨Ÿä ü´¶.
        - Ÿäÿ±ÿØ ÿßŸÑÿ®Ÿàÿ™ ÿπŸÑŸâ ŸÉŸÑŸÖÿßÿ™ ŸÖÿ≠ÿØÿØÿ© ŸÖÿ´ŸÑ "mamouni1xp".
        - ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ∞ŸÉÿ± ÿßŸÑÿ®Ÿàÿ™ÿå ŸÅÿ≥ŸäŸÇŸàŸÖ ÿ®ÿßŸÑÿ±ÿØ ÿ®ŸÄ "3endek ratakel ma3endekx maratakelx".

        **üëë ÿßŸÑŸÖÿßŸÑŸÉ ŸÅŸÇÿ∑:** ÿ®ÿπÿ∂ ÿßŸÑÿ£ŸàÿßŸÖÿ± ÿ™ÿπŸÖŸÑ ŸÅŸÇÿ∑ ŸÑÿµÿßÿ≠ÿ® ÿßŸÑÿ®Ÿàÿ™.
        `;
        try {
            await message.channel.send(helpText);
        } catch (err) {
            console.error("‚ùå Error sending help message:", err);
        }
    }

    // Owner-only commands
    if (message.author.id === OWNER_ID) {
        if (message.content.startsWith('!zidd')) {
            const user = message.mentions.users.first();
            const customEmoji = message.content.split(' ')[2] || defaultEmoji;

            if (user) {
                userEmojis.set(user.id, customEmoji);
                await message.channel.send(`‚úÖ ÿ™ŸÖÿ™ ÿ•ÿ∂ÿßŸÅÿ© ${user.tag} ŸÖÿπ ÿßŸÑÿßŸäŸÖŸàÿ¨Ÿä ${customEmoji}`);
            } else {
                await message.channel.send("‚ö†Ô∏è ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ.");
            }
        }

        if (message.content.startsWith('!kherej')) {
            const user = message.mentions.users.first();
            if (user && userEmojis.has(user.id)) {
                userEmojis.delete(user.id);
                await message.channel.send(`‚ùå ÿ™ŸÖÿ™ ÿ•ÿ≤ÿßŸÑÿ© ${user.tag} ŸÖŸÜ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ™ŸÅÿßÿπŸÑ ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä.`);
            } else {
                await message.channel.send("‚ö†Ô∏è Ÿáÿ∞ÿß ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ ŸÅŸä ÿßŸÑŸÇÿßÿ¶ŸÖÿ©.");
            }
        }

        if (message.content.startsWith('!lista')) {
            if (userEmojis.size === 0) {
                await message.channel.send("‚ö†Ô∏è ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≥ÿ™ÿÆÿØŸÖŸàŸÜ ŸÅŸä ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ™ŸÅÿßÿπŸÑ ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä.");
            } else {
                const userList = Array.from(userEmojis.entries())
                    .map(([userId, emoji]) => `<@${userId}> ‚Üí ${emoji}`);
                await message.channel.send(`‚úÖ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ŸàÿßŸäŸÖŸàÿ¨Ÿäÿßÿ™ŸáŸÖ:\n` + userList.join("\n"));
            }
        }

        if (message.content.startsWith('!jaweb')) {
            const newResponse = message.content.slice('!jaweb'.length).trim();
            if (newResponse) {
                ownerTagResponse = newResponse;
                await message.reply(`‚úÖ ÿ™ŸÖ ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑÿ±ÿØ ÿ•ŸÑŸâ: ${newResponse}`);
            } else {
                await message.reply("‚ö†Ô∏è ÿßŸÑÿ±ÿ¨ÿßÿ° ŸÉÿ™ÿßÿ®ÿ© ÿßŸÑÿ±ÿØ ÿßŸÑÿ¨ÿØŸäÿØ. ŸÖÿ´ÿßŸÑ: !jaweb ŸÖÿ¥ÿ∫ŸàŸÑ ÿ≠ÿßŸÑŸäÿß");
            }
        }

        if (message.content === '!mon/of') {
            ownerMentionEnabled = !ownerMentionEnabled;
            await message.reply(`‚úÖ Owner mention responses are now ${ownerMentionEnabled ? 'enabled' : 'disabled'}`);
        }
    }

    // Handle owner mention
    if (message.mentions.has(OWNER_ID) && ownerMentionEnabled) {
        try {
            await message.reply(ownerTagResponse);
        } catch (err) {
            console.error("‚ùå Error replying to mention:", err);
        }
    }
});

// Log in using the token from .env
client.login(process.env.DISCORD_TOKEN).catch(err => {
    console.error("‚ùå Login failed:", err);
    process.exit(1);
});
